%uses qaussian quad for 2d integral
%it first discritizes in y direction 
%then uses the 1d code to get the 2d integral

%%%    Copyright (C) 2013  Isaac Harris 
%%%    updated in 2021 to use 32 quad points  

function Q=numquad2d(f,a,b,c,d)

%maps [-1,1] to [c,d] for the numerics
m=(d-c)/2; p=(c+d)/2;
u=@(y) m.*y+p; 

%Define the global quadrature points and weights

p1=[0.048307665687738316235, 0.1444719615827964934852, 0.2392873622521370745446, ...
    0.33186860228212764978, 0.4213512761306353453641, 0.5068999089322293900238,...
    0.5877157572407623290408, 0.6630442669302152009751, 0.7321821187402896803874,...
    0.7944837959679424069631, 0.8493676137325699701337, 0.8963211557660521239653,...
    0.9349060759377396891709, 0.9647622555875064307738, 0.9856115115452683354002,...
    0.997263861849481563545];

p2=-p1;


w=[0.0965400885147278005668, 0.0956387200792748594191, 0.0938443990808045656392,...
   0.091173878695763884713, 0.0876520930044038111428, 0.083311924226946755222,...
   0.078193895787070306472, 0.072345794108848506225, 0.065822222776361846838,...
   0.0586840934785355471453, 0.0509980592623761761962, 0.0428358980222266806569,...
   0.0342738629130214331027, 0.0253920653092620594558, 0.0162743947309056706052,...
   0.0070186100094700966004];


F=@(x) m*(w(1)*f(x,u(p1(1)))+w(2)*f(x,u(p1(2)))+w(3)*f(x,u(p1(3)))+w(4)*f(x,u(p1(4)))...
    +w(5)*f(x,u(p1(5)))+w(6)*f(x,u(p1(6)))+w(7)*f(x,u(p1(7)))+w(8)*f(x,u(p1(8)))...
    +w(9)*f(x,u(p1(9)))+w(10)*f(x,u(p1(10)))+w(11)*f(x,u(p1(11)))+w(12)*f(x,u(p1(12)))...
    +w(13)*f(x,u(p1(13)))+w(14)*f(x,u(p1(14)))+w(15)*f(x,u(p1(15)))+w(16)*f(x,u(p1(16)))...
    +w(1)*f(x,u(p2(1)))+w(2)*f(x,u(p2(2)))+w(3)*f(x,u(p2(3)))+w(4)*f(x,u(p2(4)))...
    +w(5)*f(x,u(p2(5)))+w(6)*f(x,u(p2(6)))+w(7)*f(x,u(p2(7)))+w(8)*f(x,u(p2(8)))...
    +w(9)*f(x,u(p2(9)))+w(10)*f(x,u(p2(10)))+w(11)*f(x,u(p2(11)))+w(12)*f(x,u(p2(12)))...
    +w(13)*f(x,u(p2(13)))+w(14)*f(x,u(p2(14)))+w(15)*f(x,u(p2(15)))+w(16)*f(x,u(p2(16))));

%use 1d integration on discritezed function F 
Q=numquad1d(F,a,b);

end 


%Uses 12 quad points to compute integrals 
%This is what computes int_a^b F(x) dx
% inputs F    = function to be integrated  
%        a,b  = limits of integration 
function I=numquad1d(F,a,b)


%Uses the global quadrature points and weights
m=(b-a)/2;
c=(a+b)/2;
u=@(x) m*x+c;
%maps [a,b] to [-1,1] for the numerics

p1=[0.048307665687738316235, 0.1444719615827964934852, 0.2392873622521370745446, ...
    0.33186860228212764978, 0.4213512761306353453641, 0.5068999089322293900238,...
    0.5877157572407623290408, 0.6630442669302152009751, 0.7321821187402896803874,...
    0.7944837959679424069631, 0.8493676137325699701337, 0.8963211557660521239653,...
    0.9349060759377396891709, 0.9647622555875064307738, 0.9856115115452683354002,...
    0.997263861849481563545];

p=[p1 , -p1];


w=[0.0965400885147278005668, 0.0956387200792748594191, 0.0938443990808045656392,...
   0.091173878695763884713, 0.0876520930044038111428, 0.083311924226946755222,...
   0.078193895787070306472, 0.072345794108848506225, 0.065822222776361846838,...
   0.0586840934785355471453, 0.0509980592623761761962, 0.0428358980222266806569,...
   0.0342738629130214331027, 0.0253920653092620594558, 0.0162743947309056706052,...
   0.0070186100094700966004];

W=[w , w]; U=u(p);

I=m*(sum(W.*F(U)));

end 


